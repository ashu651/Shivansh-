datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id              String    @id @default(cuid())
  username        String    @unique
  email           String    @unique
  password        String
  bio             String?
  profilePhoto    String?
  isEmailVerified Boolean   @default(false)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  posts           Post[]
  followers       Follow[]  @relation("followers")
  following       Follow[]  @relation("following")
  sessions        Session[]
  messages        Message[] @relation("authorMessages")
  conversations   ConversationParticipant[]
  stories         Story[]
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  refreshToken String
  user         User     @relation(fields: [userId], references: [id])
  createdAt    DateTime @default(now())
  expiresAt    DateTime
}

model Post {
  id        String    @id @default(cuid())
  authorId  String
  caption   String?
  media     Json
  likes     Like[]
  comments  Comment[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  author    User      @relation(fields: [authorId], references: [id])
  @@index([createdAt])
}

model Like {
  id        String   @id @default(cuid())
  userId    String
  postId    String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  post      Post     @relation(fields: [postId], references: [id])
  @@unique([userId, postId])
}

model Comment {
  id        String    @id @default(cuid())
  postId    String
  authorId  String
  text      String
  parentId  String?
  createdAt DateTime  @default(now())
  post      Post      @relation(fields: [postId], references: [id])
  author    User      @relation(fields: [authorId], references: [id])
  parent    Comment?  @relation("CommentToComment", fields: [parentId], references: [id])
  children  Comment[] @relation("CommentToComment")
}

model Follow {
  id          String @id @default(cuid())
  followerId  String
  followingId String
  follower    User   @relation("following", fields: [followerId], references: [id])
  following   User   @relation("followers", fields: [followingId], references: [id])
  createdAt   DateTime @default(now())
  @@unique([followerId, followingId])
}

model Conversation {
  id            String                        @id @default(cuid())
  createdAt     DateTime                      @default(now())
  updatedAt     DateTime                      @updatedAt
  participants  ConversationParticipant[]
  messages      Message[]
}

model ConversationParticipant {
  id             String       @id @default(cuid())
  userId         String
  conversationId String
  user           User         @relation(fields: [userId], references: [id])
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  @@unique([userId, conversationId])
}

model Message {
  id             String       @id @default(cuid())
  conversationId String
  authorId       String
  text           String
  attachments    Json?
  createdAt      DateTime     @default(now())
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  author         User         @relation("authorMessages", fields: [authorId], references: [id])
}

model Story {
  id        String   @id @default(cuid())
  authorId  String
  media     Json
  expiresAt DateTime
  createdAt DateTime @default(now())
  author    User     @relation(fields: [authorId], references: [id])
  @@index([expiresAt])
}